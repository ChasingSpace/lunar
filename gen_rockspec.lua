local lfs = require "lfs"

local modules = {}

local function join(with_char, ...)
  return table.concat({ ... }, with_char)
end

local function scan_dir(path, module_dir)
  for name in lfs.dir(path) do
    if name ~= "." and name ~= ".." then
      local file_path = join("/", path, name)
      local attrs = lfs.attributes(file_path)

      if attrs and attrs.mode == "directory" then
        if module_dir then
          scan_dir(file_path, join(".", module_dir, name))
        else
          scan_dir(file_path, name)
        end
      elseif attrs and attrs.mode == "file" and name:sub(-4) == ".lua" then
        local dot_path = join(".", "lunar", module_dir, name)
        local path = join("/", file_path)

        -- removing .lua first from dot_path since they shouldnt have it
        dot_path = dot_path:sub(1, -5)

        -- if this name is init.lua, trim '.init' from dot_path
        if name == "init.lua" then
          dot_path = dot_path:sub(1, #dot_path - 5)
        end

        modules[dot_path] = path
      end
    end
  end
end

scan_dir("./dist/lunar")

local version = "0.0-1"
local rockspec = [[
---------------------------------------
-- AUTOGENERATED BY gen_rockspec.lua --
-- DO NOT EDIT DIRECTLY!             --
---------------------------------------

package = "Lunar"
version = "]] .. version .. [["
source = {
  url = "git://github.com/lunarlang/lunar"
}
description = {
  summary = "Lunar, a superset programming language of Lua 5.1",
  homepage = "http://github.com/lunarlang/lunar",
  license = "Apache-2.0"
}
dependencies = {
  "lua >= 5.1, < 5.4",
  "luafilesystem >= 1.7, < 2.0"
}
build = {
  type = "builtin",
  modules = {
]]

for dot_path, file_path in pairs(modules) do
  rockspec = rockspec .. "    [\"" .. dot_path .. "\"] = \"" .. file_path .. "\",\n"
end

rockspec = rockspec .. "  }\n}\n"

local file, err = io.open("lunar-" .. version .. ".rockspec", "w+")

if not file then
  error(err)
else
  file:write(rockspec)
  file:flush()
end
