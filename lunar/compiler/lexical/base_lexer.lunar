class BaseLexer
  line = 1
  line_begins = 0
  position = 1

  constructor(source)
    self.source = source
  end

  function consume()
    local c = self:peek()
    self:move(1)
    return c
  end

  function error(reason)
    error(string.format("%d:%d: %s", self.line, self:get_column(), reason), 0)
  end

  function get_column()
    return self.position - self.line_begins
  end

  function count(c, offset)
    if offset == nil then offset = 0 end

    local n = 0

    while self:peek(offset + n) == c do
      n += 1
    end

    return n
  end

  function is_finished()
    return self.position > #self.source
  end

  function peek(offset)
    if offset == nil then offset = 0 end

    -- string.sub outside the boundary of self.source will return empty string
    -- but we want it to return nil so it can evaluate to false
    if not self:is_finished() then
      return self.source:sub(self.position + offset, self.position + offset)
    end
  end

  function move(by)
    if by == nil then by = 0 end

    self.position += by
  end

  function match(str)
    if self:is_finished() then
      return false
    end

    return self.source:sub(self.position, self.position + #str - 1) == str
  end

  function move_if_match(str)
    local ok = self:match(str)

    if ok then
      self:move(#str)
    end

    return ok
  end
end

return BaseLexer
