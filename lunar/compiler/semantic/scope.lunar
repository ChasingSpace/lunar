local SymbolTable = require "lunar.compiler.semantic.symbol_table"

class Scope
  symbol_table = SymbolTable.new()

  constructor(level, parent, env, file_path)
    self.level = level
    self.parent = parent
    if not parent then
      self.env = env
      self.file_path = file_path
    end
  end

  function get_value(name)
    if self.parent then
      return self.symbol_table:get_value(name) or self.parent:get_value(name)
    else
      return self.symbol_table:get_value(name) or self.env:get_global_value(self.file_path, name)
    end
  end

  function get_type(name)
    if self.parent then
      return self.symbol_table:get_type(name) or self.parent:get_type(name)
    else
      return self.symbol_table:get_type(name) or self.env:get_global_type(self.file_path, name)
    end
  end

  function has_value(name)
    if self.parent then
      return self.symbol_table:has_value(name) or self.parent:has_value(name)
    else
      return self.symbol_table:has_value(name) or self.env:has_global_value(self.file_path, name)
    end
  end

  function has_type(name)
    if self.parent then
      return self.symbol_table:has_type(name) or self.parent:has_type(name)
    else
      return self.symbol_table:has_type(name) or self.env:has_global_type(self.file_path, name)
    end
  end

  function has_level_value(name)
    local base_scope = self
    repeat
      if self.symbol_table:has_value(name) then
        return true
      end
      base_scope = base_scope.parent
    until not base_scope or base_scope.level ~= self.level
  end

  function has_level_type(name)
    local base_scope = self
    repeat
      if self.symbol_table.has_type(name) then
        return true
      end
      base_scope = base_scope.parent
    until not base_scope or base_scope.level ~= self.level
  end

  function add_value(symbol)
    self.symbol_table:add_value(symbol)
  end

  function add_type(symbol)
    if self.parent then
      error("Types must be bound to a root scope")
    end
    self.symbol_table:add_type(symbol)
  end
end

return Scope
