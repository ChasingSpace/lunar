class Symbol
  assignment_references = {} -- Identifier[]
  references = {} -- Identifier[]
  declarations = {} -- Node[]
  declaration_references = {} -- Identifier[]
  builtin = false

  constructor(name)
    self.name = name
  end

  function is_builtin()
    return self.builtin
  end

  function is_assigned()
    return #self.assignment_references > 0
  end

  function is_declared()
    return #self.declarations > 0
  end

  function is_redeclared()
    return #self.declarations > 1
  end

  function get_canonical_declaration()
    return self.declarations[1]
  end

  function is_referenced()
    return #self.references > 0
  end

  function bind_as_builtin()
    self.builtin = true
  end

  function bind_declaration_reference(ident_or_varargs, declaration)
    local refs = self.declaration_references
    refs[#refs + 1] = ident_or_varargs
    ident_or_varargs.symbol = self

    local decls = self.declarations
    decls[#decls + 1] = declaration
  end

  -- Anonymous declarations (e.g. contextual "self" in classes)
  function bind_declaration(declaration)
    local decls = self.declarations
    decls[#decls + 1] = declaration
  end

  function bind_reference(ident_or_varargs)
    local refs = self.references
    refs[#refs + 1] = ident_or_varargs
    ident_or_varargs.symbol = self
  end

  function bind_assignment_reference(ident_or_varargs)
    local refs = self.assignment_references
    refs[#refs + 1] = ident_or_varargs
    ident_or_varargs.symbol = self
  end

  -- Re-binds all references, declarations, exports, and members to a new symbol
  function merge_into(new_symbol)
    for _, k in pairs({"references", "declarations", "declaration_references", "assignment_references"}) do
      local nodes = self[k]
      local other_nodes = new_symbol[k]
      for i = 1, #nodes do
        local node = nodes[i]
        if node.symbol == self then
          node.symbol = new_symbol
        end
        other_nodes[#other_nodes + 1] = node
      end
    end
  end

  function __tostring()
    return "Symbol ('" .. tostring(self.name) .. "')"
  end
end

return Symbol
