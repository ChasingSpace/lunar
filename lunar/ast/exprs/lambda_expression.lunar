local SyntaxKind = require "lunar.ast.syntax_kind"
local SyntaxNode = require "lunar.ast.syntax_node"
local ReturnStatement = require "lunar.ast.stats.return_statement"
local FunctionExpression = require "lunar.ast.exprs.function_expression"

class LambdaExpression << SyntaxNode
  constructor(start_pos, end_pos, parameters, body, implicit_return, return_type_annotation)
    super(SyntaxKind.lambda_expression, start_pos, end_pos)

    self.parameters = parameters
    self.body = body -- could be a block or a single expression
    self.implicit_return = implicit_return -- if single expression, it is implicitly returned
    self.return_type_annotation = return_type_annotation
  end

  function lower()
    local block

    if self.implicit_return then
      -- rewrites the body to a return statement
      block = { ReturnStatement.new(nil, nil, { self.body }) }
    else
      -- compatible type, so we simply reuse it
      block = self.body
    end

    return FunctionExpression.new(nil, nil, self.parameters, block)
  end
end

return LambdaExpression
