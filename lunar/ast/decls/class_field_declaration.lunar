local SyntaxKind = require "lunar.ast.syntax_kind"
local SyntaxNode = require "lunar.ast.syntax_node"
local Identifier = require "lunar.ast.exprs.identifier"
local MemberExpression = require "lunar.ast.exprs.member_expression"
local AssignmentStatement = require "lunar.ast.stats.assignment_statement"
local SelfAssignmentOpKind = require "lunar.ast.stats.self_assignment_op_kind"

class ClassFieldDeclaration << SyntaxNode
  constructor(start_pos, end_pos, is_static, identifier, type_annotation, value)
    super(SyntaxKind.class_field_declaration)

    self.is_static = is_static
    self.identifier = identifier
    self.type_annotation = type_annotation
    self.value = value
  end

  function lower(class_member_expr)
    -- we don't transpile field members with no default value
    if self.value == nil then
      return nil
    end

    local lhs
    if self.is_static then
      lhs = class_member_expr
    else
      lhs = Identifier.new("self")
    end

    local member_expr = MemberExpression.new(lhs, self.identifier)
    return AssignmentStatement.new({ member_expr }, SelfAssignmentOpKind.equal_op, { self.value })
  end
end

return ClassFieldDeclaration
