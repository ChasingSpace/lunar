local require_dev = require "spec.helpers.require_dev"

describe("ExpressionStatement syntax", do
  require_dev()

  it("should return one ExpressionStatement node with an expression of FunctionCallExpression", do
    local tokens = Lexer.new("hello()"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({
      AST.ExpressionStatement.new(1, 3, AST.FunctionCallExpression.new(1, 3, AST.Identifier.new(1, 1, "hello"), {}))
    }, result)
  end)

  it("should guard against base-less literal expressions", do
    local tokens = Lexer.new("''"):tokenize()
    
    local success, value = pcall(function()
      return Parser.new(tokens):parse()
    end)

    assert.False(success)
  end)

  it("should guard against base-less index expressions", do
    local tokens = Lexer.new("['']"):tokenize()
    
    local success, value = pcall(function()
      return Parser.new(tokens):parse()
    end)

    assert.False(success)
  end)

  it("should guard against base-less '.' member expressions", do
    local tokens = Lexer.new("."):tokenize()
    
    local success, value = pcall(function()
      return Parser.new(tokens):parse()
    end)

    assert.False(success)
  end)

  it("should guard against base-less ':' member expressions", do
    local tokens = Lexer.new("."):tokenize()
    
    local success, value = pcall(function()
      return Parser.new(tokens):parse()
    end)

    assert.False(success)
  end)
end)
