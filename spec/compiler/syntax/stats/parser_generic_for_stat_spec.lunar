local require_dev = require "spec.helpers.require_dev"

describe("GenericForStatement syntax", do
  require_dev()

  it("should return one GenericForStatement node with one identifier and one expression", do
    local tokens = Lexer.new("for i in pairs() do end"):tokenize()
    local result = Parser.new(tokens):parse()

    local expected_identifiers = { AST.Identifier.new(3, 3, "i") }
    local expected_exprlist = {
      AST.FunctionCallExpression.new(7, 9, AST.Identifier.new(7, 7, "pairs"), {})
    }

    assert.same({
      AST.GenericForStatement.new(1, 13, expected_identifiers, expected_exprlist, {})
    }, result)
  end)

  it("should return one GenericForStatement node with two identifiers and one expressions", do
    local tokens = Lexer.new("for i, v in pairs() do end"):tokenize()
    local result = Parser.new(tokens):parse()

    local expected_identifiers = { AST.Identifier.new(3, 3, "i"), AST.Identifier.new(6, 6, "v") }
    local expected_exprlist = {
      AST.FunctionCallExpression.new(10, 12, AST.Identifier.new(10, 10, "pairs"), {})
    }

    assert.same({
      AST.GenericForStatement.new(1, 16, expected_identifiers, expected_exprlist, {})
    }, result)
  end)

  it("should return one GenericForStatement node with two identifiers and two expressions", do
    local tokens = Lexer.new("for i, v in next, t do end"):tokenize()
    local result = Parser.new(tokens):parse()

    local expected_identifiers = { AST.Identifier.new(3, 3, "i"), AST.Identifier.new(6, 6, "v") }
    local expected_exprlist = {
      AST.Identifier.new(10, 10, "next"),
      AST.Identifier.new(13, 13, "t")
    }

    assert.same({
      AST.GenericForStatement.new(1, 17, expected_identifiers, expected_exprlist, {})
    }, result)
  end)
end)
