local require_dev = require "spec.helpers.require_dev"

describe("FunctionStatement syntax", do
  require_dev()

  it("should return one FunctionStatement node with an Identifier named test and two ParameterDeclaration", do
    local tokens = Lexer.new("function test(a, b) end"):tokenize()
    local result = Parser.new(tokens):parse()

    local expected_name = AST.Identifier.new(3, 3, "test")
    local expected_params = {
      AST.ParameterDeclaration.new(5, 5, AST.Identifier.new(5, 5, "a")),
      AST.ParameterDeclaration.new(8, 8, AST.Identifier.new(8, 8, "b"))
    }

    assert.same({
      AST.FunctionStatement.new(1, 11, expected_name, expected_params, {}, nil)
    }, result)
  end)

  it("should return one FunctionStatement node with a MemberExpression of a.b:c", do
    local tokens = Lexer.new("function a.b:c() end"):tokenize()
    local result = Parser.new(tokens):parse()

    local root_ident = AST.Identifier.new(3, 3, "a")
    local middle_member_expr = AST.MemberExpression.new(3, 5, root_ident, AST.Identifier.new(5, 5, "b"))
    local top_member_expr = AST.MemberExpression.new(3, 7, middle_member_expr, AST.Identifier.new(7, 7, "c"), true)

    assert.same({
      AST.FunctionStatement.new(1, 11, top_member_expr, {}, {}, nil)
    }, result)
  end)

  it("should return a FunctionStatement node whose definition was local", do
    local tokens = Lexer.new("local function test() end"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({
      AST.FunctionStatement.new(1, 9, AST.Identifier.new(5, 5, "test"), {}, {}, nil, true)
    }, result)
  end)

  it("should attach return type annotation", do
    local tokens = Lexer.new("local function test(): string end"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({
      AST.FunctionStatement.new(1, 12, AST.Identifier.new(5, 5, "test"), {}, {}, AST.Identifier.new(10, 10, "string"), true)
    }, result)
  end)

  it("should attach type annotation to formal parameters", do
    local tokens = Lexer.new("function test(a: string, b, c: any) end"):tokenize()
    local result = Parser.new(tokens):parse()

    local expected_name = AST.Identifier.new(3, 3, "test")
    local expected_params = {
      AST.ParameterDeclaration.new(5, 8, AST.Identifier.new(5, 5, "a", AST.Identifier.new(8, 8, "string"))),
      AST.ParameterDeclaration.new(11, 11, AST.Identifier.new(11, 11, "b", nil)),
      AST.ParameterDeclaration.new(14, 17, AST.Identifier.new(14, 14, "c", AST.Identifier.new(17, 17, "any"))),
    }

    assert.same({
      AST.FunctionStatement.new(1, 20, expected_name, expected_params, {}, nil)
    }, result)
  end)
end)
