local require_dev = require "spec.helpers.require_dev"

describe("AssignmentStatement syntax", do
  require_dev()

  it("should return one AssignmentStatement with one Identifier and one expression", do
    local tokens = Lexer.new("hello = 1"):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.Identifier.new(1, 1, "hello") }
    local exprs = { AST.NumberLiteralExpression.new(5, 5, 1) }

    assert.same({ AST.AssignmentStatement.new(1, 5, variables, AST.SelfAssignmentOpKind.equal_op, exprs) }, result)
  end)


  it("should return one AssignmentStatement with one IndexExpression using bracket notation and one expression", do
    local tokens = Lexer.new("hello['world'] = 1"):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.IndexExpression.new(1, 4, AST.Identifier.new(1, 1, "hello"), AST.StringLiteralExpression.new(3, 3, "'world'")) }
    local exprs = { AST.NumberLiteralExpression.new(8, 8, 1) }

    assert.same({ AST.AssignmentStatement.new(1, 8, variables, AST.SelfAssignmentOpKind.equal_op, exprs) }, result)
  end)

  it("should return one AssignmentStatement with one MemberExpression using dot notation and one expression", do
    local tokens = Lexer.new("hello.world = 1"):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.MemberExpression.new(1, 3, AST.Identifier.new(1, 1, "hello"), AST.Identifier.new(3, 3, "world")) }
    local exprs = { AST.NumberLiteralExpression.new(7, 7, 1) }

    assert.same({ AST.AssignmentStatement.new(1, 7, variables, AST.SelfAssignmentOpKind.equal_op, exprs) }, result)
  end)

  it("should return one AssignmentStatement with two Identifiers and one expression", do
    local tokens = Lexer.new("hello, world = ..."):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.Identifier.new(1, 1, "hello"), AST.Identifier.new(4, 4, "world") }
    local exprs = { AST.VariableArgumentExpression.new(8, 8) }

    assert.same({ AST.AssignmentStatement.new(1, 8, variables, AST.SelfAssignmentOpKind.equal_op, exprs) }, result)
  end)

  it("should return one AssignmentStatement whose operator is concatenation_equal_op", do
    local tokens = Lexer.new("hello ..= 'world'"):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.Identifier.new(1, 1, "hello") }
    local exprs = { AST.StringLiteralExpression.new(5, 5, "'world'") }

    assert.same({ AST.AssignmentStatement.new(1, 5, variables, AST.SelfAssignmentOpKind.concatenation_equal_op, exprs) }, result)
  end)

  it("should return one AssignmentStatement whose operator is addition_equal_op", do
    local tokens = Lexer.new("hello += 1"):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.Identifier.new(1, 1, "hello") }
    local exprs = { AST.NumberLiteralExpression.new(5, 5, 1) }

    assert.same({ AST.AssignmentStatement.new(1, 5, variables, AST.SelfAssignmentOpKind.addition_equal_op, exprs) }, result)
  end)

  it("should return one AssignmentStatement whose operator is subtraction_equal_op", do
    local tokens = Lexer.new("hello -= 1"):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.Identifier.new(1, 1, "hello") }
    local exprs = { AST.NumberLiteralExpression.new(5, 5, 1) }

    assert.same({ AST.AssignmentStatement.new(1, 5, variables, AST.SelfAssignmentOpKind.subtraction_equal_op, exprs) }, result)
  end)

  it("should return one AssignmentStatement whose operator is multiplication_equal_op", do
    local tokens = Lexer.new("hello *= 1"):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.Identifier.new(1, 1, "hello") }
    local exprs = { AST.NumberLiteralExpression.new(5, 5, 1) }

    assert.same({ AST.AssignmentStatement.new(1, 5, variables, AST.SelfAssignmentOpKind.multiplication_equal_op, exprs) }, result)
  end)

  it("should return one AssignmentStatement whose operator is division_equal_op", do
    local tokens = Lexer.new("hello /= 1"):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.Identifier.new(1, 1, "hello") }
    local exprs = { AST.NumberLiteralExpression.new(5, 5, 1) }

    assert.same({ AST.AssignmentStatement.new(1, 5, variables, AST.SelfAssignmentOpKind.division_equal_op, exprs) }, result)
  end)

  it("should return one AssignmentStatement whose operator is power_equal_op", do
    local tokens = Lexer.new("hello ^= 1"):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.Identifier.new(1, 1, "hello") }
    local exprs = { AST.NumberLiteralExpression.new(5, 5, 1) }

    assert.same({ AST.AssignmentStatement.new(1, 5, variables, AST.SelfAssignmentOpKind.power_equal_op, exprs) }, result)
  end)

  it("should return one AssignmentStatement whose operator is remainder_equal_op", do
    local tokens = Lexer.new("hello %= 1"):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.Identifier.new(1, 1, "hello") }
    local exprs = { AST.NumberLiteralExpression.new(5, 5, 1) }

    assert.same({ AST.AssignmentStatement.new(1, 5, variables, AST.SelfAssignmentOpKind.remainder_equal_op, exprs) }, result)
  end)

  it("should return one AssignmentStatement with one identifier and two expressions with concatenation_equal_op", do
    local tokens = Lexer.new("hello ..= 'world', a()"):tokenize()
    local result = Parser.new(tokens):parse()

    local variables = { AST.Identifier.new(1, 1, "hello") }
    local exprs = {
      AST.StringLiteralExpression.new(5, 5, "'world'"),
      AST.FunctionCallExpression.new(8, 10, AST.Identifier.new(8, 8, "a"), {})
    }

    assert.same({ AST.AssignmentStatement.new(1, 10, variables, AST.SelfAssignmentOpKind.concatenation_equal_op, exprs) }, result)
  end)

  it("should throw an error given an invalid left-hand side identifier", do
    local tokens = Lexer.new("hi() = 1"):tokenize()

    assert.errors(|| Parser.new(tokens):parse(), "1:6: unexpected token '='")
  end)
end)
