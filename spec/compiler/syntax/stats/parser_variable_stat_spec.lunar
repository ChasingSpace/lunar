local require_dev = require "spec.helpers.require_dev"

describe("VariableStatement syntax", do
  require_dev()

  it("should return one VariableSyntax node with two names and two expressions", do
    local tokens = Lexer.new("local a, b = 1, 2"):tokenize()
    local result = Parser.new(tokens):parse()

    local names = { AST.Identifier.new(3, 3, "a"), AST.Identifier.new(6, 6, "b") }
    local exprs = {
      AST.NumberLiteralExpression.new(10, 10, 1),
      AST.NumberLiteralExpression.new(13, 13, 2)
    }

    assert.same({ AST.VariableStatement.new(1, 13, names, exprs) }, result)
  end)

  it("should return one VariableSyntax node with two names and one expression", do
    local tokens = Lexer.new("local a, b = ..."):tokenize()
    local result = Parser.new(tokens):parse()

    local names = { AST.Identifier.new(3, 3, "a"), AST.Identifier.new(6, 6, "b") }
    local exprs = { AST.VariableArgumentExpression.new(10, 10) }

    assert.same({ AST.VariableStatement.new(1, 10, names, exprs) }, result)
  end)

  it("should return one VariableSyntax node with one name and no expression", do
    local tokens = Lexer.new("local a"):tokenize()
    local result = Parser.new(tokens):parse()

    local names = { AST.Identifier.new(3, 3, "a") }

    assert.same({ AST.VariableStatement.new(1, 3, names, nil) }, result)
  end)

  it("should return two VariableSyntax node with one name and one expression, each", do
    local tokens = Lexer.new("local a = 1 local b = 2"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({
      AST.VariableStatement.new(1, 7, { AST.Identifier.new(3, 3, "a") }, { AST.NumberLiteralExpression.new(7, 7, 1) }),
      AST.VariableStatement.new(9, 15, { AST.Identifier.new(11, 11, "b") }, { AST.NumberLiteralExpression.new(15, 15, 2) })
    }, result)
  end)

  it("should attach type annotations in a number dictionary", do
    local tokens = Lexer.new("local a: string, b, c: any = 1, 2, 3"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({
      AST.VariableStatement.new(1, 25,
        { AST.Identifier.new(3, 3, "a", AST.Identifier.new(6, 6, "string")), AST.Identifier.new(9, 9, "b"), AST.Identifier.new(12, 12, "c", AST.Identifier.new(15, 15, "any")) },
        { AST.NumberLiteralExpression.new(19, 19, 1), AST.NumberLiteralExpression.new(22, 22, 2), AST.NumberLiteralExpression.new(25, 25, 3) }),
    }, result)
  end)

  it("should attach a type annotation in a statement with one name and no expression", do
    local tokens = Lexer.new("local a: string"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same(AST.Identifier.new(3, 3, "a", AST.Identifier.new(6, 6, "string")), result[1].identlist[1])
    assert.same({
      AST.VariableStatement.new(1, 6, { AST.Identifier.new(3, 3, "a", AST.Identifier.new(6, 6, "string")) }),
    }, result)
  end)
end)
