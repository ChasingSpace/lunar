local require_dev = require "spec.helpers.require_dev"

describe("ClassStatement syntax", do
  require_dev()

  it("should return one ClassStatement node whose name is 'C'", do
    local tokens = Lexer.new("class C end"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({ AST.ClassStatement.new(1, 5, AST.Identifier.new(3, 3, "C"), nil, {}) }, result)
  end)

  it("should return one ClassStatement node whose name is 'C' and inherits from 'BaseC'", do
    local tokens = Lexer.new("class C << BaseC end"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({ AST.ClassStatement.new(1, 9, AST.Identifier.new(3, 3, "C"), AST.Identifier.new(7, 7, "BaseC"), {}) }, result)
  end)

  it("should return one ClassStatement node with one instance function", do
    local tokens = Lexer.new("class C function m() end end"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({
      AST.ClassStatement.new(1, 13, AST.Identifier.new(3, 3, "C"), nil, {
        AST.ClassFunctionDeclaration.new(5, 11, false, AST.Identifier.new(7, 7, "m"), {}, {})
      })
    }, result)
  end)

  it("should return one ClassStatement node with one instance function and a return type annotation of 'nil'", do
    local tokens = Lexer.new("class C function m(): nil end end"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({
      AST.ClassStatement.new(1, 16, AST.Identifier.new(3, 3, "C"), nil, {
        AST.ClassFunctionDeclaration.new(5, 14, false, AST.Identifier.new(7, 7, "m"), {}, {}, AST.Identifier.new(12, 12, "nil"))
      })
    }, result)
  end)

  it("should return one ClassStatement node with one static function", do
    local tokens = Lexer.new("class C static function m() end end"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({
      AST.ClassStatement.new(1, 15, AST.Identifier.new(3, 3, "C"), nil, {
        AST.ClassFunctionDeclaration.new(5, 13, true, AST.Identifier.new(9, 9, "m"), {}, {})
      })
    }, result)
  end)

  it("should return one ClassStatement node with one constructor", do
    local tokens = Lexer.new("class C constructor() end end"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({
      AST.ClassStatement.new(1, 11, AST.Identifier.new(3, 3, "C"), nil, {
        AST.ConstructorDeclaration.new(5, 9, {}, {})
      })
    }, result)
  end)

  it("should not return one ClassStatement node but instead return an ExpressionStatement calling 'class'", do
    local tokens = Lexer.new("class()"):tokenize()
    local result = Parser.new(tokens):parse()

    assert.same({
      AST.ExpressionStatement.new(1, 3, AST.FunctionCallExpression.new(1, 3, AST.Identifier.new(1, 1, "class"), {}))
    }, result)
  end)
end)
