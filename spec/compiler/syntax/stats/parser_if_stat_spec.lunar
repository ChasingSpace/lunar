local require_dev = require "spec.helpers.require_dev"

describe("IfStatement syntax", do
  require_dev()

  it("should return one IfStatement node", do
    local tokens = Lexer.new("if true then end"):tokenize()
    local result = Parser.new(tokens):parse()

    local expected_expr = AST.BooleanLiteralExpression.new(true)

    assert.same({ AST.IfStatement.new(expected_expr, {}) }, result)
  end)

  it("should return one IfStatement node with one elseif branch", do
    local tokens = Lexer.new("if false then elseif false then end"):tokenize()
    local result = Parser.new(tokens):parse()

    -- since all branches here has the same
    local expected_expr = AST.BooleanLiteralExpression.new(false)

    assert.same({
      AST.IfStatement.new(expected_expr, {})
        :push_elseif(AST.IfStatement.new(expected_expr, {}))
    }, result)
  end)

  it("should return one IfStatement node with one elseif branch and an else branch", do
    local tokens = Lexer.new("if false then elseif false then else end"):tokenize()
    local result = Parser.new(tokens):parse()

    local expected_expr = AST.BooleanLiteralExpression.new(false)

    assert.same({
      AST.IfStatement.new(expected_expr, {})
        :push_elseif(AST.IfStatement.new(expected_expr, {}, {}))
        :set_else(AST.IfStatement.new(nil, {}))
    }, result)
  end)

  it("should return nested IfStatement nodes", do
    local tokens = Lexer.new("if false then if false then end end"):tokenize()
    local result = Parser.new(tokens):parse()

    local expected_expr = AST.BooleanLiteralExpression.new(false)

    assert.same({
      AST.IfStatement.new(expected_expr, { AST.IfStatement.new(expected_expr, {}) })
    }, result)
  end)
end)
