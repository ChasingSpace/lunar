local require_dev = require "spec.helpers.require_dev"

describe("LiteralExpression syntax", do
  require_dev()

  it("should return one NilLiteralExpression node", do
    local tokens = Lexer.new("nil"):tokenize()
    local result = Parser.new(tokens):expression()

    assert.same(AST.NilLiteralExpression.new(1, 1), result)
  end)

  it("should return one BooleanLiteralExpression node given a value of true", do
    local tokens = Lexer.new("true"):tokenize()
    local result = Parser.new(tokens):expression()

    assert.same(AST.BooleanLiteralExpression.new(1, 1, true), result)
  end)

  it("should return one BooleanLiteralExpression node given a value of false", do
    local tokens = Lexer.new("false"):tokenize()
    local result = Parser.new(tokens):expression()

    assert.same(AST.BooleanLiteralExpression.new(1, 1, false), result)
  end)

  it("should return one NumberLiteralExpression node given a value of 100", do
    local tokens = Lexer.new("100"):tokenize()
    local result = Parser.new(tokens):expression()

    assert.same(AST.NumberLiteralExpression.new(1, 1, 100), result)
  end)

  it("should return one StringLiteralExpression node given a string value", do
    local tokens = Lexer.new("'Hello, world!'"):tokenize()
    local result = Parser.new(tokens):expression()

    assert.same(AST.StringLiteralExpression.new(1, 1, "'Hello, world!'"), result)
  end)

  it("should return one VariableArgumentExpression node", do
    local tokens = Lexer.new("..."):tokenize()
    local result = Parser.new(tokens):expression()

    assert.same(AST.VariableArgumentExpression.new(1, 1), result)
  end)

  it("should return one FunctionExpression node whose parameters has two ParameterDeclaration nodes and a BreakStatement block", do
    local tokens = Lexer.new("function(hello, ...) break end"):tokenize()
    local result = Parser.new(tokens):expression()

    local expected_params = { AST.ParameterDeclaration.new(3, 3, AST.Identifier.new(3, 3, "hello")), AST.ParameterDeclaration.new(6, 6, AST.Identifier.new(6, 6, "...")) }
    local expected_block = { AST.BreakStatement.new(9, 9) }

    assert.same(AST.FunctionExpression.new(1, 11, expected_params, expected_block), result)
  end)

  it("should return one TableLiteralExpression node with three FieldDeclaration nodes", do
    local tokens = Lexer.new("{ ['hello'] = true, world = false; nil; }"):tokenize()
    local result = Parser.new(tokens):expression()

    local expected_fields = {
      AST.IndexFieldDeclaration.new(3, 9, AST.StringLiteralExpression.new(4, 4, "'hello'"), AST.BooleanLiteralExpression.new(9, 9, true)),
      AST.MemberFieldDeclaration.new(12, 16, AST.Identifier.new(12, 12, "world"), AST.BooleanLiteralExpression.new(16, 16, false)),
      AST.SequentialFieldDeclaration.new(19, 19, AST.NilLiteralExpression.new(19, 19)),
    }

    assert.same(AST.TableLiteralExpression.new(1, 22, expected_fields), result)
  end)

  it("should return one LambdaExpression node with two arguments and does not implicitly return", do
    local tokens = Lexer.new("|a, b| do return a + b end"):tokenize()
    local result = Parser.new(tokens):expression()

    local expected_params = {
      AST.ParameterDeclaration.new(2, 2, AST.Identifier.new(2, 2, "a")),
      AST.ParameterDeclaration.new(5, 5, AST.Identifier.new(5, 5, "b"))
    }

    local expected_block = {
      AST.ReturnStatement.new(10, 16, {
        AST.BinaryOpExpression.new(
          12, 16,
          AST.Identifier.new(12, 12, "a"),
          AST.BinaryOpKind.addition_op,
          AST.Identifier.new(16, 16, "b")
        )
      })
    }

    assert.same(AST.LambdaExpression.new(1, 18, expected_params, expected_block, false), result)
  end)

  it("should return one LambdaExpression with a return type annotation of 'number'", do
    local tokens = Lexer.new("||: number do return 1 end"):tokenize()
    local result = Parser.new(tokens):expression()

    local expected_params = {}

    local expected_block = {
      AST.ReturnStatement.new(9, 11, {
        AST.NumberLiteralExpression.new(11, 11, 1)
      })
    }

    local expected_return_annotaiton = AST.Identifier.new(5, 5, "number")

    assert.same(AST.LambdaExpression.new(1, 13, expected_params, expected_block, false, expected_return_annotaiton), result)
  end)

  it("should return one LambdaExpression with a return type annotation of 'number' and an implicit return", do
    local tokens = Lexer.new("||: number 1"):tokenize()
    local result = Parser.new(tokens):expression()

    local expected_params = {}

    local expected_expr = AST.NumberLiteralExpression.new(7, 7, 1)

    local expected_return_annotaiton = AST.Identifier.new(5, 5, "number")

    assert.same(AST.LambdaExpression.new(1, 7, expected_params, expected_expr, true, expected_return_annotaiton), result)
  end)

  it("should return one LambdaExpression node without any arguments and does not implicitly return", do
    local tokens = Lexer.new("do return 1 end"):tokenize()
    local result = Parser.new(tokens):expression()

    local expected_block = {
      AST.ReturnStatement.new(3, 5, { AST.NumberLiteralExpression.new(5, 5, 1) })
    }

    assert.same(AST.LambdaExpression.new(1, 7, {}, expected_block, false), result)
  end)

  it("should return one LambdaExpression node with two arguments and does implicitly return", do
    local tokens = Lexer.new("|a, b| a + b"):tokenize()
    local result = Parser.new(tokens):expression()

    local expected_params = {
      AST.ParameterDeclaration.new(2, 2, AST.Identifier.new(2, 2, "a")),
      AST.ParameterDeclaration.new(5, 5, AST.Identifier.new(5, 5, "b"))
    }

    local expected_expr = AST.BinaryOpExpression.new(
      8, 12,
      AST.Identifier.new(8, 8, "a"),
      AST.BinaryOpKind.addition_op,
      AST.Identifier.new(12, 12, "b")
    )

    assert.same(AST.LambdaExpression.new(1, 12, expected_params, expected_expr, true), result)
  end)
end)
