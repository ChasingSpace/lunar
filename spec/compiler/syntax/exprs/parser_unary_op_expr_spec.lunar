local require_dev = require "spec.helpers.require_dev"

describe("UnaryOpExpression syntax", do
  require_dev()

  it("should return an UnaryOpExpression node whose operand is BooleanLiteralExpression and operator is not_op", do
    local tokens = Lexer.new("not false"):tokenize()
    local result = Parser.new(tokens):expression()

    local operator = AST.UnaryOpKind.not_op
    local operand = AST.BooleanLiteralExpression.new(3, 3, false)

    assert.same(AST.UnaryOpExpression.new(1, 3, operator, operand), result)
  end)

  it("should return an UnaryOpExpression node whose operand is NumberLiteralExpression and operator is negative_op", do
    local tokens = Lexer.new("-1"):tokenize()
    local result = Parser.new(tokens):expression()

    local operator = AST.UnaryOpKind.negative_op
    local operand = AST.NumberLiteralExpression.new(2, 2, 1)

    assert.same(AST.UnaryOpExpression.new(1, 2, operator, operand), result)
  end)

  it("should return an UnaryOpExpression node whose operand is TableLiteralExpression and operator is length_op", do
    local tokens = Lexer.new("#{}"):tokenize()
    local result = Parser.new(tokens):expression()

    local operator = AST.UnaryOpKind.length_op
    local operand = AST.TableLiteralExpression.new(2, 3, {})

    assert.same(AST.UnaryOpExpression.new(1, 3, operator, operand), result)
  end)

  it("should guard against unfinished unary expressions", do
    local tokens = Lexer.new("#"):tokenize()
    
    local success, value = pcall(function()
      return Parser.new(tokens):expression()
    end)

    assert.False(success)
  end)
end)
